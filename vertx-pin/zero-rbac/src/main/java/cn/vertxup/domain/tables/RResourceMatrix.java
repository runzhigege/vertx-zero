/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.domain.tables;


import cn.vertxup.domain.Db;
import cn.vertxup.domain.Indexes;
import cn.vertxup.domain.Keys;
import cn.vertxup.domain.tables.records.RResourceMatrixRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RResourceMatrix extends TableImpl<RResourceMatrixRecord> {

    /**
     * The reference instance of <code>DB_ORIGIN_X.R_RESOURCE_MATRIX</code>
     */
    public static final RResourceMatrix R_RESOURCE_MATRIX = new RResourceMatrix();
    private static final long serialVersionUID = 461494051;
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.KEY</code>. 「key」- 限定记录ID
     */
    public final TableField<RResourceMatrixRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 限定记录ID");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.OWNER</code>. 「owner」- 用户 / 角色ID
     */
    public final TableField<RResourceMatrixRecord, String> OWNER = createField("OWNER", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「owner」- 用户 / 角色ID");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.OWNER_TYPE</code>. 「ownerType」- ROLE 角色，USER 用户
     */
    public final TableField<RResourceMatrixRecord, Boolean> OWNER_TYPE = createField("OWNER_TYPE", org.jooq.impl.SQLDataType.BIT, this, "「ownerType」- ROLE 角色，USER 用户");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.RESOURCE_ID</code>. 「resourceId」- 关联资源ID
     */
    public final TableField<RResourceMatrixRecord, String> RESOURCE_ID = createField("RESOURCE_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「resourceId」- 关联资源ID");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.PROJECTION</code>. 「projection」- 该资源的列定义（单用户处理）
     */
    public final TableField<RResourceMatrixRecord, String> PROJECTION = createField("PROJECTION", org.jooq.impl.SQLDataType.CLOB, this, "「projection」- 该资源的列定义（单用户处理）");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.QUERY</code>. 「query」- 该资源的行查询（单用户处理）
     */
    public final TableField<RResourceMatrixRecord, String> QUERY = createField("QUERY", org.jooq.impl.SQLDataType.CLOB, this, "「query」- 该资源的行查询（单用户处理）");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    public final TableField<RResourceMatrixRecord, String> ROWS = createField("ROWS", org.jooq.impl.SQLDataType.CLOB, this, "「rows」- 该资源针对保存的行进行过滤");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.EXPIRED</code>. 「expired」- 资源过期时间（动态授权）
     */
    public final TableField<RResourceMatrixRecord, LocalDateTime> EXPIRED = createField("EXPIRED", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「expired」- 资源过期时间（动态授权）");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public final TableField<RResourceMatrixRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「sigma」- 用户组绑定的统一标识");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<RResourceMatrixRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<RResourceMatrixRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<RResourceMatrixRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<RResourceMatrixRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<RResourceMatrixRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<RResourceMatrixRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ORIGIN_X.R_RESOURCE_MATRIX.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<RResourceMatrixRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ORIGIN_X.R_RESOURCE_MATRIX</code> table reference
     */
    public RResourceMatrix() {
        this(DSL.name("R_RESOURCE_MATRIX"), null);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.R_RESOURCE_MATRIX</code> table reference
     */
    public RResourceMatrix(String alias) {
        this(DSL.name(alias), R_RESOURCE_MATRIX);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.R_RESOURCE_MATRIX</code> table reference
     */
    public RResourceMatrix(Name alias) {
        this(alias, R_RESOURCE_MATRIX);
    }

    private RResourceMatrix(Name alias, Table<RResourceMatrixRecord> aliased) {
        this(alias, aliased, null);
    }

    private RResourceMatrix(Name alias, Table<RResourceMatrixRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RResourceMatrixRecord> getRecordType() {
        return RResourceMatrixRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ORIGIN_X;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.R_RESOURCE_MATRIX_OWNER, Indexes.R_RESOURCE_MATRIX_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RResourceMatrixRecord> getPrimaryKey() {
        return Keys.KEY_R_RESOURCE_MATRIX_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RResourceMatrixRecord>> getKeys() {
        return Arrays.<UniqueKey<RResourceMatrixRecord>>asList(Keys.KEY_R_RESOURCE_MATRIX_PRIMARY, Keys.KEY_R_RESOURCE_MATRIX_OWNER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RResourceMatrix as(String alias) {
        return new RResourceMatrix(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RResourceMatrix as(Name alias) {
        return new RResourceMatrix(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RResourceMatrix rename(String name) {
        return new RResourceMatrix(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RResourceMatrix rename(Name name) {
        return new RResourceMatrix(name, null);
    }
}
