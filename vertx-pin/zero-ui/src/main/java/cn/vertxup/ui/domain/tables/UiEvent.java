/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Indexes;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiEventRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiEvent extends TableImpl<UiEventRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_EVENT</code>
     */
    public static final UiEvent UI_EVENT = new UiEvent();
    private static final long serialVersionUID = 1201213367;
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.KEY</code>. 「key」-- 主键
     */
    public final TableField<UiEventRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」-- 主键");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.ACTION_ID</code>. 「actionId」-- 事件关联的ActionId（安全专用）
     */
    public final TableField<UiEventRecord, String> ACTION_ID = createField("ACTION_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「actionId」-- 事件关联的ActionId（安全专用）");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.TARGET</code>. 「target」-- 必须，事件对应的目标ID
     */
    public final TableField<UiEventRecord, String> TARGET = createField("TARGET", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「target」-- 必须，事件对应的目标ID");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.RELATED_TYPE</code>. 「relatedType」-- 事件类型：FORM - 表单事件，COMPONENT - 组件事件
     */
    public final TableField<UiEventRecord, String> RELATED_TYPE = createField("RELATED_TYPE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「relatedType」-- 事件类型：FORM - 表单事件，COMPONENT - 组件事件");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.RELATED_ID</code>. 「relatedId」-- 关联ID
     */
    public final TableField<UiEventRecord, String> RELATED_ID = createField("RELATED_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「relatedId」-- 关联ID");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.AJAX</code>. 「ajax」- 对应 ajax 节点
     */
    public final TableField<UiEventRecord, String> AJAX = createField("AJAX", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「ajax」- 对应 ajax 节点");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.MODE</code>. 「mode」- 对应 mode 节点，$env中的合并、删除
     */
    public final TableField<UiEventRecord, String> MODE = createField("MODE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「mode」- 对应 mode 节点，$env中的合并、删除");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.MODAL</code>. 「modal」- 窗口配置
     */
    public final TableField<UiEventRecord, String> MODAL = createField("MODAL", org.jooq.impl.SQLDataType.CLOB, this, "「modal」- 窗口配置");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.QUERY</code>. 「query」- 查询参数专用配置
     */
    public final TableField<UiEventRecord, String> QUERY = createField("QUERY", org.jooq.impl.SQLDataType.CLOB, this, "「query」- 查询参数专用配置");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.CONNECTOR</code>. 「connector」- 查询专用：AND或OR
     */
    public final TableField<UiEventRecord, String> CONNECTOR = createField("CONNECTOR", org.jooq.impl.SQLDataType.VARCHAR(5), this, "「connector」- 查询专用：AND或OR");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.FILE</code>. 「file」- 上传专用
     */
    public final TableField<UiEventRecord, String> FILE = createField("FILE", org.jooq.impl.SQLDataType.CLOB, this, "「file」- 上传专用");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.RULES</code>. 「rules」- 事件专用的配置，规则
     */
    public final TableField<UiEventRecord, String> RULES = createField("RULES", org.jooq.impl.SQLDataType.CLOB, this, "「rules」- 事件专用的配置，规则");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.DATA_MAGIC</code>. 「dataMagic」- 数据加载：config -&gt; magic
     */
    public final TableField<UiEventRecord, String> DATA_MAGIC = createField("DATA_MAGIC", org.jooq.impl.SQLDataType.CLOB, this, "「dataMagic」- 数据加载：config -> magic");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.DATA_ARGUMENTS</code>. 「dataArguments」- 函数配置：config -&gt; arguments
     */
    public final TableField<UiEventRecord, String> DATA_ARGUMENTS = createField("DATA_ARGUMENTS", org.jooq.impl.SQLDataType.CLOB, this, "「dataArguments」- 函数配置：config -> arguments");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiEventRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiEventRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiEventRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiEventRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiEventRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiEventRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiEventRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_EVENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiEventRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_EVENT</code> table reference
     */
    public UiEvent() {
        this(DSL.name("UI_EVENT"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_EVENT</code> table reference
     */
    public UiEvent(String alias) {
        this(DSL.name(alias), UI_EVENT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_EVENT</code> table reference
     */
    public UiEvent(Name alias) {
        this(alias, UI_EVENT);
    }

    private UiEvent(Name alias, Table<UiEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiEvent(Name alias, Table<UiEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiEventRecord> getRecordType() {
        return UiEventRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiEventRecord> getPrimaryKey() {
        return Keys.KEY_UI_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiEventRecord>> getKeys() {
        return Arrays.<UniqueKey<UiEventRecord>>asList(Keys.KEY_UI_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiEvent as(String alias) {
        return new UiEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiEvent as(Name alias) {
        return new UiEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiEvent rename(String name) {
        return new UiEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiEvent rename(Name name) {
        return new UiEvent(name, null);
    }
}
