/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ui.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiEvent extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.KEY</code>. 「key」-- 主键
     */
    public IUiEvent setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.KEY</code>. 「key」-- 主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.ACTION_ID</code>. 「actionId」-- 事件关联的ActionId（安全专用）
     */
    public IUiEvent setActionId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.ACTION_ID</code>. 「actionId」-- 事件关联的ActionId（安全专用）
     */
    public String getActionId();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.TARGET</code>. 「target」-- 必须，事件对应的目标ID
     */
    public IUiEvent setTarget(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.TARGET</code>. 「target」-- 必须，事件对应的目标ID
     */
    public String getTarget();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.RELATED_TYPE</code>. 「relatedType」-- 事件类型：FORM - 表单事件，COMPONENT - 组件事件
     */
    public IUiEvent setRelatedType(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.RELATED_TYPE</code>. 「relatedType」-- 事件类型：FORM - 表单事件，COMPONENT - 组件事件
     */
    public String getRelatedType();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.RELATED_ID</code>. 「relatedId」-- 关联ID
     */
    public IUiEvent setRelatedId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.RELATED_ID</code>. 「relatedId」-- 关联ID
     */
    public String getRelatedId();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.AJAX</code>. 「ajax」- 对应 ajax 节点
     */
    public IUiEvent setAjax(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.AJAX</code>. 「ajax」- 对应 ajax 节点
     */
    public String getAjax();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.MODE</code>. 「mode」- 对应 mode 节点，$env中的合并、删除
     */
    public IUiEvent setMode(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.MODE</code>. 「mode」- 对应 mode 节点，$env中的合并、删除
     */
    public String getMode();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.MODAL</code>. 「modal」- 窗口配置
     */
    public IUiEvent setModal(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.MODAL</code>. 「modal」- 窗口配置
     */
    public String getModal();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.QUERY</code>. 「query」- 查询参数专用配置
     */
    public IUiEvent setQuery(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.QUERY</code>. 「query」- 查询参数专用配置
     */
    public String getQuery();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.CONNECTOR</code>. 「connector」- 查询专用：AND或OR
     */
    public IUiEvent setConnector(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.CONNECTOR</code>. 「connector」- 查询专用：AND或OR
     */
    public String getConnector();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.FILE</code>. 「file」- 上传专用
     */
    public IUiEvent setFile(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.FILE</code>. 「file」- 上传专用
     */
    public String getFile();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.RULES</code>. 「rules」- 事件专用的配置，规则
     */
    public IUiEvent setRules(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.RULES</code>. 「rules」- 事件专用的配置，规则
     */
    public String getRules();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.DATA_MAGIC</code>. 「dataMagic」- 数据加载：config -&gt; magic
     */
    public IUiEvent setDataMagic(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.DATA_MAGIC</code>. 「dataMagic」- 数据加载：config -&gt; magic
     */
    public String getDataMagic();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.DATA_ARGUMENTS</code>. 「dataArguments」- 函数配置：config -&gt; arguments
     */
    public IUiEvent setDataArguments(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.DATA_ARGUMENTS</code>. 「dataArguments」- 函数配置：config -&gt; arguments
     */
    public String getDataArguments();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiEvent setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiEvent setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiEvent setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiEvent setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IUiEvent setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IUiEvent setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IUiEvent setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_EVENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IUiEvent setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_EVENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IUiEvent
     */
    public void from(cn.vertxup.ui.domain.tables.interfaces.IUiEvent from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IUiEvent
     */
    public <E extends cn.vertxup.ui.domain.tables.interfaces.IUiEvent> E into(E into);

    default IUiEvent fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setActionId(json.getString("ACTION_ID"));
        setTarget(json.getString("TARGET"));
        setRelatedType(json.getString("RELATED_TYPE"));
        setRelatedId(json.getString("RELATED_ID"));
        setAjax(json.getString("AJAX"));
        setMode(json.getString("MODE"));
        setModal(json.getString("MODAL"));
        setQuery(json.getString("QUERY"));
        setConnector(json.getString("CONNECTOR"));
        setFile(json.getString("FILE"));
        setRules(json.getString("RULES"));
        setDataMagic(json.getString("DATA_MAGIC"));
        setDataArguments(json.getString("DATA_ARGUMENTS"));
        setActive(json.getBoolean("ACTIVE"));
        setSigma(json.getString("SIGMA"));
        setMetadata(json.getString("METADATA"));
        setLanguage(json.getString("LANGUAGE"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("ACTION_ID",getActionId());
        json.put("TARGET",getTarget());
        json.put("RELATED_TYPE",getRelatedType());
        json.put("RELATED_ID",getRelatedId());
        json.put("AJAX",getAjax());
        json.put("MODE",getMode());
        json.put("MODAL",getModal());
        json.put("QUERY",getQuery());
        json.put("CONNECTOR",getConnector());
        json.put("FILE",getFile());
        json.put("RULES",getRules());
        json.put("DATA_MAGIC",getDataMagic());
        json.put("DATA_ARGUMENTS",getDataArguments());
        json.put("ACTIVE",getActive());
        json.put("SIGMA",getSigma());
        json.put("METADATA",getMetadata());
        json.put("LANGUAGE",getLanguage());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
