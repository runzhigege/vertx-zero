/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Indexes;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiPageRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiPage extends TableImpl<UiPageRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_PAGE</code>
     */
    public static final UiPage UI_PAGE = new UiPage();
    private static final long serialVersionUID = 1674214945;
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.KEY</code>. 「key」- 页面唯一主键
     */
    public final TableField<UiPageRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 页面唯一主键");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.URL</code>. 「url」- 模块入口地址，前端统一URL，后端统一URI（术语）
     */
    public final TableField<UiPageRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「url」- 模块入口地址，前端统一URL，后端统一URI（术语）");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.APP</code>. 「app」- 入口APP名称，APP中的path
     */
    public final TableField<UiPageRecord, String> APP = createField("APP", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「app」- 入口APP名称，APP中的path");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.MODULE</code>. 「module」- 模块相关信息
     */
    public final TableField<UiPageRecord, String> MODULE = createField("MODULE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「module」- 模块相关信息");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.PAGE</code>. 「page」- 页面路径信息
     */
    public final TableField<UiPageRecord, String> PAGE = createField("PAGE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「page」- 页面路径信息");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.SECURE</code>. 「secure」- 是否执行安全检查（安全检查才会被权限系统捕捉）
     */
    public final TableField<UiPageRecord, Boolean> SECURE = createField("SECURE", org.jooq.impl.SQLDataType.BIT, this, "「secure」- 是否执行安全检查（安全检查才会被权限系统捕捉）");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.PARAM_MAP</code>. 「paramMap」- URL地址中的配置key=value
     */
    public final TableField<UiPageRecord, String> PARAM_MAP = createField("PARAM_MAP", org.jooq.impl.SQLDataType.CLOB, this, "「paramMap」- URL地址中的配置key=value");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.STATE</code>. 「state」- $env环境变量专用，设置默认的 initState
     */
    public final TableField<UiPageRecord, String> STATE = createField("STATE", org.jooq.impl.SQLDataType.CLOB, this, "「state」- $env环境变量专用，设置默认的 initState");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.CONTAINER_NAME</code>. 「containerName」如果包含了容器组件，设置容器组件名称
     */
    public final TableField<UiPageRecord, String> CONTAINER_NAME = createField("CONTAINER_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「containerName」如果包含了容器组件，设置容器组件名称");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.CONTAINER_CONFIG</code>. 「containerConfig」如果包含了容器组件，设置容器组件配置信息
     */
    public final TableField<UiPageRecord, String> CONTAINER_CONFIG = createField("CONTAINER_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "「containerConfig」如果包含了容器组件，设置容器组件配置信息");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.GRID</code>. 「grid」- 布局专用数据，设置Ant Design的行列结构
     */
    public final TableField<UiPageRecord, String> GRID = createField("GRID", org.jooq.impl.SQLDataType.CLOB, this, "「grid」- 布局专用数据，设置Ant Design的行列结构");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.LAYOUT_ID</code>. 「layoutId」- 使用的模板ID，最终生成 layout 顶层节点数据
     */
    public final TableField<UiPageRecord, String> LAYOUT_ID = createField("LAYOUT_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「layoutId」- 使用的模板ID，最终生成 layout 顶层节点数据");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiPageRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiPageRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiPageRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiPageRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiPageRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiPageRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiPageRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_PAGE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiPageRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_PAGE</code> table reference
     */
    public UiPage() {
        this(DSL.name("UI_PAGE"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_PAGE</code> table reference
     */
    public UiPage(String alias) {
        this(DSL.name(alias), UI_PAGE);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_PAGE</code> table reference
     */
    public UiPage(Name alias) {
        this(alias, UI_PAGE);
    }

    private UiPage(Name alias, Table<UiPageRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiPage(Name alias, Table<UiPageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiPageRecord> getRecordType() {
        return UiPageRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_PAGE_PRIMARY, Indexes.UI_PAGE_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiPageRecord> getPrimaryKey() {
        return Keys.KEY_UI_PAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiPageRecord>> getKeys() {
        return Arrays.<UniqueKey<UiPageRecord>>asList(Keys.KEY_UI_PAGE_PRIMARY, Keys.KEY_UI_PAGE_URL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiPage as(String alias) {
        return new UiPage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiPage as(Name alias) {
        return new UiPage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiPage rename(String name) {
        return new UiPage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiPage rename(Name name) {
        return new UiPage(name, null);
    }
}
