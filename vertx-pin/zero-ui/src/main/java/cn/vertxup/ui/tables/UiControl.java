/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.tables;


import cn.vertxup.ui.Db;
import cn.vertxup.ui.Indexes;
import cn.vertxup.ui.Keys;
import cn.vertxup.ui.tables.records.UiControlRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiControl extends TableImpl<UiControlRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_CONTROL</code>
     */
    public static final UiControl UI_CONTROL = new UiControl();
    private static final long serialVersionUID = -1144956366;
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.KEY</code>. 「key」- 主键
     */
    public final TableField<UiControlRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CONTAINER_NAME</code>. 「containerName」- 当前控件使用的容器名
     */
    public final TableField<UiControlRecord, String> CONTAINER_NAME = createField("CONTAINER_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「containerName」- 当前控件使用的容器名");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CONTAINER_CONFIG</code>. 「containerConfig」- 当前控件使用的容器配置
     */
    public final TableField<UiControlRecord, String> CONTAINER_CONFIG = createField("CONTAINER_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "「containerConfig」- 当前控件使用的容器配置");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.COMPONENT_NAME</code>. 「componentName」- 当前控件使用的组件名
     */
    public final TableField<UiControlRecord, String> COMPONENT_NAME = createField("COMPONENT_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「componentName」- 当前控件使用的组件名");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.COMPONENT_DATA</code>. 「componentData」- 当前控件绑定的ajax数据名
     */
    public final TableField<UiControlRecord, String> COMPONENT_DATA = createField("COMPONENT_DATA", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「componentData」- 当前控件绑定的ajax数据名");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.COMPONENT_CONFIG</code>. 「componentConfig」- 当前控件使用的配置
     */
    public final TableField<UiControlRecord, String> COMPONENT_CONFIG = createField("COMPONENT_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "「componentConfig」- 当前控件使用的配置");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.DATA_EVENT</code>. 「dataEvent] - 当前控件绑定的事件类型：单事件、并行、串行
     */
    public final TableField<UiControlRecord, String> DATA_EVENT = createField("DATA_EVENT", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「dataEvent] - 当前控件绑定的事件类型：单事件、并行、串行");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.DATA_MAPPING</code>. 「dataMapping」- 数据映射：config -&gt; mapping
     */
    public final TableField<UiControlRecord, String> DATA_MAPPING = createField("DATA_MAPPING", org.jooq.impl.SQLDataType.CLOB, this, "「dataMapping」- 数据映射：config -> mapping");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.DATA_MAGIC</code>. 「dataMagic」- 数据加载：config -&gt; magic
     */
    public final TableField<UiControlRecord, String> DATA_MAGIC = createField("DATA_MAGIC", org.jooq.impl.SQLDataType.CLOB, this, "「dataMagic」- 数据加载：config -> magic");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.SIGN</code>. 「sign」- 控件使用的签名基本信息
     */
    public final TableField<UiControlRecord, String> SIGN = createField("SIGN", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「sign」- 控件使用的签名基本信息");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.PAGE_ID</code>. 「pageId」- 当前控件所在的页面ID
     */
    public final TableField<UiControlRecord, String> PAGE_ID = createField("PAGE_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「pageId」- 当前控件所在的页面ID");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiControlRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiControlRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiControlRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiControlRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiControlRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiControlRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiControlRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_CONTROL.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiControlRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_CONTROL</code> table reference
     */
    public UiControl() {
        this(DSL.name("UI_CONTROL"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_CONTROL</code> table reference
     */
    public UiControl(String alias) {
        this(DSL.name(alias), UI_CONTROL);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_CONTROL</code> table reference
     */
    public UiControl(Name alias) {
        this(alias, UI_CONTROL);
    }

    private UiControl(Name alias, Table<UiControlRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiControl(Name alias, Table<UiControlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiControlRecord> getRecordType() {
        return UiControlRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_CONTROL_PRIMARY, Indexes.UI_CONTROL_SIGN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiControlRecord> getPrimaryKey() {
        return Keys.KEY_UI_CONTROL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiControlRecord>> getKeys() {
        return Arrays.<UniqueKey<UiControlRecord>>asList(Keys.KEY_UI_CONTROL_PRIMARY, Keys.KEY_UI_CONTROL_SIGN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiControl as(String alias) {
        return new UiControl(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiControl as(Name alias) {
        return new UiControl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiControl rename(String name) {
        return new UiControl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiControl rename(Name name) {
        return new UiControl(name, null);
    }
}
