/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ui.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiControl extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.KEY</code>. 「key」- 主键
     */
    public IUiControl setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.KEY</code>. 「key」- 主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_NAME</code>. 「containerName」- 当前控件使用的容器名
     */
    public IUiControl setContainerName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_NAME</code>. 「containerName」- 当前控件使用的容器名
     */
    public String getContainerName();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_CONFIG</code>. 「containerConfig」- 当前控件使用的容器配置
     */
    public IUiControl setContainerConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CONTAINER_CONFIG</code>. 「containerConfig」- 当前控件使用的容器配置
     */
    public String getContainerConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_NAME</code>. 「componentName」- 当前控件使用的组件名
     */
    public IUiControl setComponentName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_NAME</code>. 「componentName」- 当前控件使用的组件名
     */
    public String getComponentName();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_DATA</code>. 「componentData」- 当前控件绑定的ajax数据名
     */
    public IUiControl setComponentData(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_DATA</code>. 「componentData」- 当前控件绑定的ajax数据名
     */
    public String getComponentData();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_CONFIG</code>. 「componentConfig」- 当前控件使用的配置
     */
    public IUiControl setComponentConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.COMPONENT_CONFIG</code>. 「componentConfig」- 当前控件使用的配置
     */
    public String getComponentConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.DATA_EVENT</code>. 「dataEvent] - 当前控件绑定的事件类型：单事件、并行、串行
     */
    public IUiControl setDataEvent(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.DATA_EVENT</code>. 「dataEvent] - 当前控件绑定的事件类型：单事件、并行、串行
     */
    public String getDataEvent();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.DATA_MAPPING</code>. 「dataMapping」- 数据映射：config -&gt; mapping
     */
    public IUiControl setDataMapping(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.DATA_MAPPING</code>. 「dataMapping」- 数据映射：config -&gt; mapping
     */
    public String getDataMapping();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.DATA_MAGIC</code>. 「dataMagic」- 数据加载：config -&gt; magic
     */
    public IUiControl setDataMagic(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.DATA_MAGIC</code>. 「dataMagic」- 数据加载：config -&gt; magic
     */
    public String getDataMagic();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.SIGN</code>. 「sign」- 控件使用的签名基本信息
     */
    public IUiControl setSign(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.SIGN</code>. 「sign」- 控件使用的签名基本信息
     */
    public String getSign();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.PAGE_ID</code>. 「pageId」- 当前控件所在的页面ID
     */
    public IUiControl setPageId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.PAGE_ID</code>. 「pageId」- 当前控件所在的页面ID
     */
    public String getPageId();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiControl setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiControl setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiControl setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiControl setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IUiControl setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IUiControl setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IUiControl setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IUiControl setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_CONTROL.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IUiControl
     */
    public void from(cn.vertxup.ui.tables.interfaces.IUiControl from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IUiControl
     */
    public <E extends cn.vertxup.ui.tables.interfaces.IUiControl> E into(E into);

    default IUiControl fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setContainerName(json.getString("CONTAINER_NAME"));
        setContainerConfig(json.getString("CONTAINER_CONFIG"));
        setComponentName(json.getString("COMPONENT_NAME"));
        setComponentData(json.getString("COMPONENT_DATA"));
        setComponentConfig(json.getString("COMPONENT_CONFIG"));
        setDataEvent(json.getString("DATA_EVENT"));
        setDataMapping(json.getString("DATA_MAPPING"));
        setDataMagic(json.getString("DATA_MAGIC"));
        setSign(json.getString("SIGN"));
        setPageId(json.getString("PAGE_ID"));
        setActive(json.getBoolean("ACTIVE"));
        setSigma(json.getString("SIGMA"));
        setMetadata(json.getString("METADATA"));
        setLanguage(json.getString("LANGUAGE"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("CONTAINER_NAME",getContainerName());
        json.put("CONTAINER_CONFIG",getContainerConfig());
        json.put("COMPONENT_NAME",getComponentName());
        json.put("COMPONENT_DATA",getComponentData());
        json.put("COMPONENT_CONFIG",getComponentConfig());
        json.put("DATA_EVENT",getDataEvent());
        json.put("DATA_MAPPING",getDataMapping());
        json.put("DATA_MAGIC",getDataMagic());
        json.put("SIGN",getSign());
        json.put("PAGE_ID",getPageId());
        json.put("ACTIVE",getActive());
        json.put("SIGMA",getSigma());
        json.put("METADATA",getMetadata());
        json.put("LANGUAGE",getLanguage());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
