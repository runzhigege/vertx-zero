/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.domain.tables;


import cn.vertxup.ui.domain.Db;
import cn.vertxup.ui.domain.Indexes;
import cn.vertxup.ui.domain.Keys;
import cn.vertxup.ui.domain.tables.records.UiAjaxRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiAjax extends TableImpl<UiAjaxRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_AJAX</code>
     */
    public static final UiAjax UI_AJAX = new UiAjax();
    private static final long serialVersionUID = -2134713112;
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.KEY</code>. 「key」- 主键
     */
    public final TableField<UiAjaxRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.NAME</code>. 「name」- Ajax的名称，生成ajaxKey专用
     */
    public final TableField<UiAjaxRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「name」- Ajax的名称，生成ajaxKey专用");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.URI</code>. 「uri」- 后端接口的URI地址
     */
    public final TableField<UiAjaxRecord, String> URI = createField("URI", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「uri」- 后端接口的URI地址");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.METHOD</code>. 「method」- 当前Ajax的HTTP方法
     */
    public final TableField<UiAjaxRecord, String> METHOD = createField("METHOD", org.jooq.impl.SQLDataType.VARCHAR(20), this, "「method」- 当前Ajax的HTTP方法");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.QUERY</code>. 「query」- 是否query类型的接口
     */
    public final TableField<UiAjaxRecord, Boolean> QUERY = createField("QUERY", org.jooq.impl.SQLDataType.BIT, this, "「query」- 是否query类型的接口");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.PROJECTION</code>. 「projection」- query = true 生效
     */
    public final TableField<UiAjaxRecord, String> PROJECTION = createField("PROJECTION", org.jooq.impl.SQLDataType.CLOB, this, "「projection」- query = true 生效");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.PAGER</code>. 「pager」- query = true 生效
     */
    public final TableField<UiAjaxRecord, String> PAGER = createField("PAGER", org.jooq.impl.SQLDataType.CLOB, this, "「pager」- query = true 生效");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.SORTER</code>. 「sorter」- query = true 生效
     */
    public final TableField<UiAjaxRecord, String> SORTER = createField("SORTER", org.jooq.impl.SQLDataType.CLOB, this, "「sorter」- query = true 生效");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.CRITERIA</code>. 「criteria」- query = true则位于 query之下特殊节点，query = false则直接存储 query值
     */
    public final TableField<UiAjaxRecord, String> CRITERIA = createField("CRITERIA", org.jooq.impl.SQLDataType.CLOB, this, "「criteria」- query = true则位于 query之下特殊节点，query = false则直接存储 query值");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiAjaxRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiAjaxRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiAjaxRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiAjaxRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiAjaxRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiAjaxRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiAjaxRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_AJAX.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiAjaxRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_AJAX</code> table reference
     */
    public UiAjax() {
        this(DSL.name("UI_AJAX"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_AJAX</code> table reference
     */
    public UiAjax(String alias) {
        this(DSL.name(alias), UI_AJAX);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_AJAX</code> table reference
     */
    public UiAjax(Name alias) {
        this(alias, UI_AJAX);
    }

    private UiAjax(Name alias, Table<UiAjaxRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiAjax(Name alias, Table<UiAjaxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiAjaxRecord> getRecordType() {
        return UiAjaxRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_AJAX_PRIMARY, Indexes.UI_AJAX_URI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiAjaxRecord> getPrimaryKey() {
        return Keys.KEY_UI_AJAX_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiAjaxRecord>> getKeys() {
        return Arrays.<UniqueKey<UiAjaxRecord>>asList(Keys.KEY_UI_AJAX_PRIMARY, Keys.KEY_UI_AJAX_URI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiAjax as(String alias) {
        return new UiAjax(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiAjax as(Name alias) {
        return new UiAjax(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiAjax rename(String name) {
        return new UiAjax(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiAjax rename(Name name) {
        return new UiAjax(name, null);
    }
}
