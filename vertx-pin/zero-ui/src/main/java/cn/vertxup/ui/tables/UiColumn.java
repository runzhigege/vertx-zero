/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.ui.tables;


import cn.vertxup.ui.Db;
import cn.vertxup.ui.Indexes;
import cn.vertxup.ui.Keys;
import cn.vertxup.ui.tables.records.UiColumnRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.8"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiColumn extends TableImpl<UiColumnRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.UI_COLUMN</code>
     */
    public static final UiColumn UI_COLUMN = new UiColumn();
    private static final long serialVersionUID = -1923984166;
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.KEY</code>. 「key」- 列主键
     */
    public final TableField<UiColumnRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 列主键");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.TITLE</code>. 「title」- 列标题
     */
    public final TableField<UiColumnRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「title」- 列标题");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.DATA_INDEX</code>. 「dataIndex」- 列名
     */
    public final TableField<UiColumnRecord, String> DATA_INDEX = createField("DATA_INDEX", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「dataIndex」- 列名");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.RENDER</code>. 「render」- 使用的Render函数
     */
    public final TableField<UiColumnRecord, String> RENDER = createField("RENDER", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「render」- 使用的Render函数");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.WIDTH</code>. 「width」- 当前列的宽度
     */
    public final TableField<UiColumnRecord, Integer> WIDTH = createField("WIDTH", org.jooq.impl.SQLDataType.INTEGER, this, "「width」- 当前列的宽度");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.CLASS_NAME</code>. 「className」- 当前列的特殊CSS类
     */
    public final TableField<UiColumnRecord, String> CLASS_NAME = createField("CLASS_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "「className」- 当前列的特殊CSS类");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.CONTROL_ID</code>. 「controlId」- 关联的控件ID
     */
    public final TableField<UiColumnRecord, String> CONTROL_ID = createField("CONTROL_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「controlId」- 关联的控件ID");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<UiColumnRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<UiColumnRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<UiColumnRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<UiColumnRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<UiColumnRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<UiColumnRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<UiColumnRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.UI_COLUMN.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<UiColumnRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.UI_COLUMN</code> table reference
     */
    public UiColumn() {
        this(DSL.name("UI_COLUMN"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_COLUMN</code> table reference
     */
    public UiColumn(String alias) {
        this(DSL.name(alias), UI_COLUMN);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.UI_COLUMN</code> table reference
     */
    public UiColumn(Name alias) {
        this(alias, UI_COLUMN);
    }

    private UiColumn(Name alias, Table<UiColumnRecord> aliased) {
        this(alias, aliased, null);
    }

    private UiColumn(Name alias, Table<UiColumnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UiColumnRecord> getRecordType() {
        return UiColumnRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UI_COLUMN_CONTROL_ID, Indexes.UI_COLUMN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UiColumnRecord> getPrimaryKey() {
        return Keys.KEY_UI_COLUMN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UiColumnRecord>> getKeys() {
        return Arrays.<UniqueKey<UiColumnRecord>>asList(Keys.KEY_UI_COLUMN_PRIMARY, Keys.KEY_UI_COLUMN_CONTROL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiColumn as(String alias) {
        return new UiColumn(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UiColumn as(Name alias) {
        return new UiColumn(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UiColumn rename(String name) {
        return new UiColumn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UiColumn rename(Name name) {
        return new UiColumn(name, null);
    }
}
