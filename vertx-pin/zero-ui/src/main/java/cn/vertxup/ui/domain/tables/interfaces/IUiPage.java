/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ui.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IUiPage extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.KEY</code>. 「key」- 页面唯一主键
     */
    public IUiPage setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.KEY</code>. 「key」- 页面唯一主键
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.URL</code>. 「url」- 模块入口地址，前端统一URL，后端统一URI（术语）
     */
    public IUiPage setUrl(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.URL</code>. 「url」- 模块入口地址，前端统一URL，后端统一URI（术语）
     */
    public String getUrl();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.APP</code>. 「app」- 入口APP名称，APP中的path
     */
    public IUiPage setApp(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.APP</code>. 「app」- 入口APP名称，APP中的path
     */
    public String getApp();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.MODULE</code>. 「module」- 模块相关信息
     */
    public IUiPage setModule(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.MODULE</code>. 「module」- 模块相关信息
     */
    public String getModule();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.PAGE</code>. 「page」- 页面路径信息
     */
    public IUiPage setPage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.PAGE</code>. 「page」- 页面路径信息
     */
    public String getPage();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.SECURE</code>. 「secure」- 是否执行安全检查（安全检查才会被权限系统捕捉）
     */
    public IUiPage setSecure(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.SECURE</code>. 「secure」- 是否执行安全检查（安全检查才会被权限系统捕捉）
     */
    public Boolean getSecure();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.PARAM_MAP</code>. 「paramMap」- URL地址中的配置key=value
     */
    public IUiPage setParamMap(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.PARAM_MAP</code>. 「paramMap」- URL地址中的配置key=value
     */
    public String getParamMap();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.STATE</code>. 「state」- $env环境变量专用，设置默认的 initState
     */
    public IUiPage setState(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.STATE</code>. 「state」- $env环境变量专用，设置默认的 initState
     */
    public String getState();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_NAME</code>. 「containerName」如果包含了容器组件，设置容器组件名称
     */
    public IUiPage setContainerName(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_NAME</code>. 「containerName」如果包含了容器组件，设置容器组件名称
     */
    public String getContainerName();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_CONFIG</code>. 「containerConfig」如果包含了容器组件，设置容器组件配置信息
     */
    public IUiPage setContainerConfig(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CONTAINER_CONFIG</code>. 「containerConfig」如果包含了容器组件，设置容器组件配置信息
     */
    public String getContainerConfig();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.GRID</code>. 「grid」- 布局专用数据，设置Ant Design的行列结构
     */
    public IUiPage setGrid(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.GRID</code>. 「grid」- 布局专用数据，设置Ant Design的行列结构
     */
    public String getGrid();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.LAYOUT_ID</code>. 「layoutId」- 使用的模板ID，最终生成 layout 顶层节点数据
     */
    public IUiPage setLayoutId(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.LAYOUT_ID</code>. 「layoutId」- 使用的模板ID，最终生成 layout 顶层节点数据
     */
    public String getLayoutId();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.ACTIVE</code>. 「active」- 是否启用
     */
    public IUiPage setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.SIGMA</code>. 「sigma」- 统一标识
     */
    public IUiPage setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.METADATA</code>. 「metadata」- 附加配置
     */
    public IUiPage setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IUiPage setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IUiPage setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IUiPage setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IUiPage setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.UI_PAGE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IUiPage setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.UI_PAGE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IUiPage
     */
    public void from(cn.vertxup.ui.domain.tables.interfaces.IUiPage from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IUiPage
     */
    public <E extends cn.vertxup.ui.domain.tables.interfaces.IUiPage> E into(E into);

    default IUiPage fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setUrl(json.getString("URL"));
        setApp(json.getString("APP"));
        setModule(json.getString("MODULE"));
        setPage(json.getString("PAGE"));
        setSecure(json.getBoolean("SECURE"));
        setParamMap(json.getString("PARAM_MAP"));
        setState(json.getString("STATE"));
        setContainerName(json.getString("CONTAINER_NAME"));
        setContainerConfig(json.getString("CONTAINER_CONFIG"));
        setGrid(json.getString("GRID"));
        setLayoutId(json.getString("LAYOUT_ID"));
        setActive(json.getBoolean("ACTIVE"));
        setSigma(json.getString("SIGMA"));
        setMetadata(json.getString("METADATA"));
        setLanguage(json.getString("LANGUAGE"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("URL",getUrl());
        json.put("APP",getApp());
        json.put("MODULE",getModule());
        json.put("PAGE",getPage());
        json.put("SECURE",getSecure());
        json.put("PARAM_MAP",getParamMap());
        json.put("STATE",getState());
        json.put("CONTAINER_NAME",getContainerName());
        json.put("CONTAINER_CONFIG",getContainerConfig());
        json.put("GRID",getGrid());
        json.put("LAYOUT_ID",getLayoutId());
        json.put("ACTIVE",getActive());
        json.put("SIGMA",getSigma());
        json.put("METADATA",getMetadata());
        json.put("LANGUAGE",getLanguage());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
