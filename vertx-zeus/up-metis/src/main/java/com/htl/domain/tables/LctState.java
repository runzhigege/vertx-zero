/*
 * This up.god.file is generated by jOOQ.
 */
package com.htl.domain.tables;


import com.htl.domain.DbHtl;
import com.htl.domain.Indexes;
import com.htl.domain.Keys;
import com.htl.domain.tables.records.LctStateRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.7"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LctState extends TableImpl<LctStateRecord> {

    /**
     * The reference instance of <code>DB_HTL.LCT_STATE</code>
     */
    public static final LctState LCT_STATE = new LctState();
    private static final long serialVersionUID = -6772034;
    /**
     * The column <code>DB_HTL.LCT_STATE.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<LctStateRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");
    /**
     * The column <code>DB_HTL.LCT_STATE.S_NAME</code>. 全名,name,S_NAME
     */
    public final TableField<LctStateRecord, String> S_NAME = createField("S_NAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "全名,name,S_NAME");
    /**
     * The column <code>DB_HTL.LCT_STATE.S_CODE</code>. code,S_CODE
     */
    public final TableField<LctStateRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");
    /**
     * The column <code>DB_HTL.LCT_STATE.S_ALIAS</code>. 别名、缩写,alias,S_ALIAS
     */
    public final TableField<LctStateRecord, String> S_ALIAS = createField("S_ALIAS", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "别名、缩写,alias,S_ALIAS");
    /**
     * The column <code>DB_HTL.LCT_STATE.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<LctStateRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");
    /**
     * The column <code>DB_HTL.LCT_STATE.I_ORDER</code>. order,I_ORDER
     */
    public final TableField<LctStateRecord, Integer> I_ORDER = createField("I_ORDER", org.jooq.impl.SQLDataType.INTEGER, this, "order,I_ORDER");
    /**
     * The column <code>DB_HTL.LCT_STATE.R_COUNTRY_ID</code>. countryId,R_COUNTRY_ID
     */
    public final TableField<LctStateRecord, String> R_COUNTRY_ID = createField("R_COUNTRY_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "countryId,R_COUNTRY_ID");
    /**
     * The column <code>DB_HTL.LCT_STATE.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<LctStateRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");
    /**
     * The column <code>DB_HTL.LCT_STATE.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<LctStateRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");
    /**
     * The column <code>DB_HTL.LCT_STATE.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<LctStateRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");
    /**
     * The column <code>DB_HTL.LCT_STATE.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<LctStateRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");
    /**
     * The column <code>DB_HTL.LCT_STATE.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<LctStateRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");
    /**
     * The column <code>DB_HTL.LCT_STATE.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<LctStateRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");
    /**
     * The column <code>DB_HTL.LCT_STATE.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<LctStateRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.LCT_STATE</code> table reference
     */
    public LctState() {
        this(DSL.name("LCT_STATE"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.LCT_STATE</code> table reference
     */
    public LctState(String alias) {
        this(DSL.name(alias), LCT_STATE);
    }

    /**
     * Create an aliased <code>DB_HTL.LCT_STATE</code> table reference
     */
    public LctState(Name alias) {
        this(alias, LCT_STATE);
    }

    private LctState(Name alias, Table<LctStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private LctState(Name alias, Table<LctStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LctStateRecord> getRecordType() {
        return LctStateRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LCT_STATE_FK_LCT_STATE_R_COUNTRY_ID, Indexes.LCT_STATE_PRIMARY, Indexes.LCT_STATE_UK_LCT_STATE_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LctStateRecord> getPrimaryKey() {
        return Keys.KEY_LCT_STATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LctStateRecord>> getKeys() {
        return Arrays.<UniqueKey<LctStateRecord>>asList(Keys.KEY_LCT_STATE_PRIMARY, Keys.KEY_LCT_STATE_UK_LCT_STATE_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LctState as(String alias) {
        return new LctState(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LctState as(Name alias) {
        return new LctState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LctState rename(String name) {
        return new LctState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LctState rename(Name name) {
        return new LctState(name, null);
    }
}
