/*
 * This up.god.file is generated by jOOQ.
 */
package com.htl.domain.tables;


import com.htl.domain.DbHtl;
import com.htl.domain.Indexes;
import com.htl.domain.Keys;
import com.htl.domain.tables.records.SysCategoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.7"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SysCategory extends TableImpl<SysCategoryRecord> {

    /**
     * The reference instance of <code>DB_HTL.SYS_CATEGORY</code>
     */
    public static final SysCategory SYS_CATEGORY = new SysCategory();
    private static final long serialVersionUID = 1402297480;
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<SysCategoryRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.S_NAME</code>. name,S_NAME
     */
    public final TableField<SysCategoryRecord, String> S_NAME = createField("S_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "name,S_NAME");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.S_CODE</code>. code,S_CODE
     */
    public final TableField<SysCategoryRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.S_TYPE</code>. REF：TABULAR -&gt; 类型本身分类，可指定不同模块,type,S_TYPE
     */
    public final TableField<SysCategoryRecord, String> S_TYPE = createField("S_TYPE", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "REF：TABULAR -> 类型本身分类，可指定不同模块,type,S_TYPE");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<SysCategoryRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.I_LEFT</code>. left,I_LEFT
     */
    public final TableField<SysCategoryRecord, Long> I_LEFT = createField("I_LEFT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "left,I_LEFT");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.I_LEVEL</code>. level,I_LEVEL
     */
    public final TableField<SysCategoryRecord, Integer> I_LEVEL = createField("I_LEVEL", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "level,I_LEVEL");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.I_RIGHT</code>. right,I_RIGHT
     */
    public final TableField<SysCategoryRecord, Long> I_RIGHT = createField("I_RIGHT", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "right,I_RIGHT");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.R_PARENT_ID</code>. parentId,R_PARENT_ID
     */
    public final TableField<SysCategoryRecord, String> R_PARENT_ID = createField("R_PARENT_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "parentId,R_PARENT_ID");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<SysCategoryRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<SysCategoryRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<SysCategoryRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<SysCategoryRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<SysCategoryRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<SysCategoryRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");
    /**
     * The column <code>DB_HTL.SYS_CATEGORY.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<SysCategoryRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.SYS_CATEGORY</code> table reference
     */
    public SysCategory() {
        this(DSL.name("SYS_CATEGORY"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.SYS_CATEGORY</code> table reference
     */
    public SysCategory(String alias) {
        this(DSL.name(alias), SYS_CATEGORY);
    }

    /**
     * Create an aliased <code>DB_HTL.SYS_CATEGORY</code> table reference
     */
    public SysCategory(Name alias) {
        this(alias, SYS_CATEGORY);
    }

    private SysCategory(Name alias, Table<SysCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysCategory(Name alias, Table<SysCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysCategoryRecord> getRecordType() {
        return SysCategoryRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_CATEGORY_FK_SYS_CATEGORY_R_PARENT_ID, Indexes.SYS_CATEGORY_PRIMARY, Indexes.SYS_CATEGORY_UK_SYS_CATEGORY_S_NAME_S_CODE_S_TYPE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysCategoryRecord> getPrimaryKey() {
        return Keys.KEY_SYS_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<SysCategoryRecord>>asList(Keys.KEY_SYS_CATEGORY_PRIMARY, Keys.KEY_SYS_CATEGORY_UK_SYS_CATEGORY_S_NAME_S_CODE_S_TYPE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysCategory as(String alias) {
        return new SysCategory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysCategory as(Name alias) {
        return new SysCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysCategory rename(String name) {
        return new SysCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysCategory rename(Name name) {
        return new SysCategory(name, null);
    }
}
