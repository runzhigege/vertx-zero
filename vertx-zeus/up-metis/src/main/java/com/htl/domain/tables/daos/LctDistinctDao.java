/*
 * This up.god.file is generated by jOOQ.
 */
package com.htl.domain.tables.daos;


import com.htl.domain.tables.LctDistinct;
import com.htl.domain.tables.records.LctDistinctRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;

import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;

/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.10.7"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LctDistinctDao extends DAOImpl<LctDistinctRecord, com.htl.domain.tables.pojos.LctDistinct, String> implements VertxDAO<com.htl.domain.tables.records.LctDistinctRecord, com.htl.domain.tables.pojos.LctDistinct, java.lang.String> {

    private io.vertx.core.Vertx vertx;

    /**
     * Create a new LctDistinctDao without any configuration
     */
    public LctDistinctDao() {
        super(LctDistinct.LCT_DISTINCT, com.htl.domain.tables.pojos.LctDistinct.class);
    }

    /**
     * Create a new LctDistinctDao with an attached configuration
     */
    public LctDistinctDao(Configuration configuration) {
        super(LctDistinct.LCT_DISTINCT, com.htl.domain.tables.pojos.LctDistinct.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(com.htl.domain.tables.pojos.LctDistinct object) {
        return object.getPkId();
    }

    /**
     * Fetch records that have <code>PK_ID IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByPkId(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.PK_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PK_ID = value</code>
     */
    public com.htl.domain.tables.pojos.LctDistinct fetchOneByPkId(String value) {
        return fetchOne(LctDistinct.LCT_DISTINCT.PK_ID, value);
    }

    /**
     * Fetch records that have <code>S_NAME IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchBySName(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.S_NAME, values);
    }

    /**
     * Fetch records that have <code>S_CODE IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchBySCode(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.S_CODE, values);
    }

    /**
     * Fetch records that have <code>J_CONFIG IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByJConfig(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.J_CONFIG, values);
    }

    /**
     * Fetch records that have <code>I_ORDER IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByIOrder(Integer... values) {
        return fetch(LctDistinct.LCT_DISTINCT.I_ORDER, values);
    }

    /**
     * Fetch records that have <code>R_CITY_ID IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByRCityId(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.R_CITY_ID, values);
    }

    /**
     * Fetch records that have <code>IS_ACTIVE IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByIsActive(Boolean... values) {
        return fetch(LctDistinct.LCT_DISTINCT.IS_ACTIVE, values);
    }

    /**
     * Fetch records that have <code>Z_SIGMA IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByZSigma(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.Z_SIGMA, values);
    }

    /**
     * Fetch records that have <code>Z_LANGUAGE IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByZLanguage(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.Z_LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_BY IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByZCreateBy(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.Z_CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_TIME IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByZCreateTime(LocalDateTime... values) {
        return fetch(LctDistinct.LCT_DISTINCT.Z_CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_BY IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByZUpdateBy(String... values) {
        return fetch(LctDistinct.LCT_DISTINCT.Z_UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_TIME IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctDistinct> fetchByZUpdateTime(LocalDateTime... values) {
        return fetch(LctDistinct.LCT_DISTINCT.Z_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>PK_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByPkIdAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.PK_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PK_ID = value</code> asynchronously
     */
    public CompletableFuture<com.htl.domain.tables.pojos.LctDistinct> fetchOneByPkIdAsync(String value) {
        return FutureTool.executeBlocking(h -> h.complete(fetchOneByPkId(value)), vertx());
    }

    /**
     * Fetch records that have <code>S_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchBySNameAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.S_NAME, values);
    }

    /**
     * Fetch records that have <code>S_CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchBySCodeAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.S_CODE, values);
    }

    /**
     * Fetch records that have <code>J_CONFIG IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByJConfigAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.J_CONFIG, values);
    }

    /**
     * Fetch records that have <code>I_ORDER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByIOrderAsync(List<Integer> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.I_ORDER, values);
    }

    /**
     * Fetch records that have <code>R_CITY_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByRCityIdAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.R_CITY_ID, values);
    }

    /**
     * Fetch records that have <code>IS_ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByIsActiveAsync(List<Boolean> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.IS_ACTIVE, values);
    }

    /**
     * Fetch records that have <code>Z_SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByZSigmaAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.Z_SIGMA, values);
    }

    /**
     * Fetch records that have <code>Z_LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByZLanguageAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.Z_LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByZCreateByAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.Z_CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByZCreateTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.Z_CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByZUpdateByAsync(List<String> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.Z_UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctDistinct>> fetchByZUpdateTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(LctDistinct.LCT_DISTINCT.Z_UPDATE_TIME, values);
    }

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
