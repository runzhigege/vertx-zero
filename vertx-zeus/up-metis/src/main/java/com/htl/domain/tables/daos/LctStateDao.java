/*
 * This file is generated by jOOQ.
*/
package com.htl.domain.tables.daos;


import com.htl.domain.tables.LctState;
import com.htl.domain.tables.records.LctStateRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LctStateDao extends DAOImpl<LctStateRecord, com.htl.domain.tables.pojos.LctState, String> implements VertxDAO<com.htl.domain.tables.records.LctStateRecord,com.htl.domain.tables.pojos.LctState,java.lang.String> {

    /**
     * Create a new LctStateDao without any configuration
     */
    public LctStateDao() {
        super(LctState.LCT_STATE, com.htl.domain.tables.pojos.LctState.class);
    }

    /**
     * Create a new LctStateDao with an attached configuration
     */
    public LctStateDao(Configuration configuration) {
        super(LctState.LCT_STATE, com.htl.domain.tables.pojos.LctState.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(com.htl.domain.tables.pojos.LctState object) {
        return object.getPkId();
    }

    /**
     * Fetch records that have <code>PK_ID IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByPkId(String... values) {
        return fetch(LctState.LCT_STATE.PK_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PK_ID = value</code>
     */
    public com.htl.domain.tables.pojos.LctState fetchOneByPkId(String value) {
        return fetchOne(LctState.LCT_STATE.PK_ID, value);
    }

    /**
     * Fetch records that have <code>S_NAME IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchBySName(String... values) {
        return fetch(LctState.LCT_STATE.S_NAME, values);
    }

    /**
     * Fetch records that have <code>S_CODE IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchBySCode(String... values) {
        return fetch(LctState.LCT_STATE.S_CODE, values);
    }

    /**
     * Fetch records that have <code>S_ALIAS IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchBySAlias(String... values) {
        return fetch(LctState.LCT_STATE.S_ALIAS, values);
    }

    /**
     * Fetch records that have <code>J_CONFIG IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByJConfig(String... values) {
        return fetch(LctState.LCT_STATE.J_CONFIG, values);
    }

    /**
     * Fetch records that have <code>I_ORDER IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByIOrder(Integer... values) {
        return fetch(LctState.LCT_STATE.I_ORDER, values);
    }

    /**
     * Fetch records that have <code>R_COUNTRY_ID IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByRCountryId(String... values) {
        return fetch(LctState.LCT_STATE.R_COUNTRY_ID, values);
    }

    /**
     * Fetch records that have <code>IS_ACTIVE IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByIsActive(Boolean... values) {
        return fetch(LctState.LCT_STATE.IS_ACTIVE, values);
    }

    /**
     * Fetch records that have <code>Z_SIGMA IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByZSigma(String... values) {
        return fetch(LctState.LCT_STATE.Z_SIGMA, values);
    }

    /**
     * Fetch records that have <code>Z_LANGUAGE IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByZLanguage(String... values) {
        return fetch(LctState.LCT_STATE.Z_LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_BY IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByZCreateBy(String... values) {
        return fetch(LctState.LCT_STATE.Z_CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_TIME IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByZCreateTime(LocalDateTime... values) {
        return fetch(LctState.LCT_STATE.Z_CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_BY IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByZUpdateBy(String... values) {
        return fetch(LctState.LCT_STATE.Z_UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_TIME IN (values)</code>
     */
    public List<com.htl.domain.tables.pojos.LctState> fetchByZUpdateTime(LocalDateTime... values) {
        return fetch(LctState.LCT_STATE.Z_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>PK_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByPkIdAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.PK_ID,values);
    }

    /**
     * Fetch a unique record that has <code>PK_ID = value</code> asynchronously
     */
    public CompletableFuture<com.htl.domain.tables.pojos.LctState> fetchOneByPkIdAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByPkId(value)),vertx());
    }

    /**
     * Fetch records that have <code>S_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchBySNameAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.S_NAME,values);
    }

    /**
     * Fetch records that have <code>S_CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchBySCodeAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.S_CODE,values);
    }

    /**
     * Fetch records that have <code>S_ALIAS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchBySAliasAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.S_ALIAS,values);
    }

    /**
     * Fetch records that have <code>J_CONFIG IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByJConfigAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.J_CONFIG,values);
    }

    /**
     * Fetch records that have <code>I_ORDER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByIOrderAsync(List<Integer> values) {
        return fetchAsync(LctState.LCT_STATE.I_ORDER,values);
    }

    /**
     * Fetch records that have <code>R_COUNTRY_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByRCountryIdAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.R_COUNTRY_ID,values);
    }

    /**
     * Fetch records that have <code>IS_ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByIsActiveAsync(List<Boolean> values) {
        return fetchAsync(LctState.LCT_STATE.IS_ACTIVE,values);
    }

    /**
     * Fetch records that have <code>Z_SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByZSigmaAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.Z_SIGMA,values);
    }

    /**
     * Fetch records that have <code>Z_LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByZLanguageAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.Z_LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByZCreateByAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.Z_CREATE_BY,values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByZCreateTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(LctState.LCT_STATE.Z_CREATE_TIME,values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByZUpdateByAsync(List<String> values) {
        return fetchAsync(LctState.LCT_STATE.Z_UPDATE_BY,values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<com.htl.domain.tables.pojos.LctState>> fetchByZUpdateTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(LctState.LCT_STATE.Z_UPDATE_TIME,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
