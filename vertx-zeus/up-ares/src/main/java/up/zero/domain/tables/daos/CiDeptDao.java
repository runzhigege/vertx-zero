/*
 * This file is generated by jOOQ.
*/
package up.zero.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import up.zero.domain.tables.CiDept;
import up.zero.domain.tables.records.CiDeptRecord;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CiDeptDao extends DAOImpl<CiDeptRecord, up.zero.domain.tables.pojos.CiDept, String> implements VertxDAO<up.zero.domain.tables.records.CiDeptRecord,up.zero.domain.tables.pojos.CiDept,java.lang.String> {

    /**
     * Create a new CiDeptDao without any configuration
     */
    public CiDeptDao() {
        super(CiDept.CI_DEPT, up.zero.domain.tables.pojos.CiDept.class);
    }

    /**
     * Create a new CiDeptDao with an attached configuration
     */
    public CiDeptDao(Configuration configuration) {
        super(CiDept.CI_DEPT, up.zero.domain.tables.pojos.CiDept.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(up.zero.domain.tables.pojos.CiDept object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByKey(String... values) {
        return fetch(CiDept.CI_DEPT.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public up.zero.domain.tables.pojos.CiDept fetchOneByKey(String value) {
        return fetchOne(CiDept.CI_DEPT.KEY, value);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByName(String... values) {
        return fetch(CiDept.CI_DEPT.NAME, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByCode(String... values) {
        return fetch(CiDept.CI_DEPT.CODE, values);
    }

    /**
     * Fetch records that have <code>COMMENT IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByComment(String... values) {
        return fetch(CiDept.CI_DEPT.COMMENT, values);
    }

    /**
     * Fetch records that have <code>MANAGER IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByManager(String... values) {
        return fetch(CiDept.CI_DEPT.MANAGER, values);
    }

    /**
     * Fetch records that have <code>CONTACT_MOBILE IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByContactMobile(String... values) {
        return fetch(CiDept.CI_DEPT.CONTACT_MOBILE, values);
    }

    /**
     * Fetch records that have <code>CONTACT_NAME IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByContactName(String... values) {
        return fetch(CiDept.CI_DEPT.CONTACT_NAME, values);
    }

    /**
     * Fetch records that have <code>APP_ID IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByAppId(String... values) {
        return fetch(CiDept.CI_DEPT.APP_ID, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByLanguage(String... values) {
        return fetch(CiDept.CI_DEPT.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByActive(Boolean... values) {
        return fetch(CiDept.CI_DEPT.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByMetadata(String... values) {
        return fetch(CiDept.CI_DEPT.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(CiDept.CI_DEPT.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByCreatedBy(String... values) {
        return fetch(CiDept.CI_DEPT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(CiDept.CI_DEPT.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<up.zero.domain.tables.pojos.CiDept> fetchByUpdatedBy(String... values) {
        return fetch(CiDept.CI_DEPT.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<up.zero.domain.tables.pojos.CiDept> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByNameAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.NAME,values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.CODE,values);
    }

    /**
     * Fetch records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByCommentAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.COMMENT,values);
    }

    /**
     * Fetch records that have <code>MANAGER IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByManagerAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.MANAGER,values);
    }

    /**
     * Fetch records that have <code>CONTACT_MOBILE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByContactMobileAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.CONTACT_MOBILE,values);
    }

    /**
     * Fetch records that have <code>CONTACT_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByContactNameAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.CONTACT_NAME,values);
    }

    /**
     * Fetch records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByAppIdAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.APP_ID,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(CiDept.CI_DEPT.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.METADATA,values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(CiDept.CI_DEPT.CREATED_AT,values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.CREATED_BY,values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(CiDept.CI_DEPT.UPDATED_AT,values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.zero.domain.tables.pojos.CiDept>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(CiDept.CI_DEPT.UPDATED_BY,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
